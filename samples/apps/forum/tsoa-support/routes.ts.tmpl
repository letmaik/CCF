// A tsoa routes template for CCF. Needs to be post-processed by postprocess.js.

// CCF:HELPERS-START
/* tslint:disable */
/* eslint-disable */
// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
import { Controller, ValidationService, FieldErrors, ValidateError, TsoaRoute, HttpStatusCodeLiteral, TsoaResponse } from '@tsoa/runtime';

{{#if authenticationModule}}
import { authentication } from '{{authenticationModule}}';
{{/if}}
{{#if iocModule}}
UNSUPPORTED: iocModule
{{/if}}

const models: TsoaRoute.Models = {
    {{#each models}}
    "{{@key}}": {
        {{#if enums}}
        "dataType": "refEnum",
        "enums": {{{json enums}}},
        {{/if}}
        {{#if properties}}
        "dataType": "refObject",
        "properties": {
            {{#each properties}}
            "{{@key}}": {{{json this}}},
            {{/each}}
        },
        "additionalProperties": {{{json additionalProperties}}},
        {{/if}}
        {{#if type}}
        "dataType": "refAlias",
        "type": {{{json type}}},
        {{/if}}
    },
    {{/each}}
};
const validationService = new ValidationService(models);

export function parseQuery(queryString: string) {
    const query = {};
    const pairs = queryString.split('&');
    for (const pair of pairs) {
        const [name, value] = pair.split('=');
        query[decodeURIComponent(name)] = decodeURIComponent(value || '');
    }
    return query;
}

function isController(object: any): object is Controller {
    return 'getHeaders' in object && 'getStatus' in object && 'setStatus' in object;
}

export function promiseHandler(controllerObj: any, data: any, response: any) {
    // Note: This function is supposed to handle Promise responses but
    // for now this has been stripped out to stay compatible with CCF.

    let statusCode;
    let headers;
    if (isController(controllerObj)) {
        headers = controllerObj.getHeaders();
        statusCode = controllerObj.getStatus();
    }

    returnHandler(response, statusCode, data, headers)
}

function returnHandler(response: any, statusCode?: number, data?: any, headers: any = {}) {
    Object.keys(headers).forEach((name: string) => {
        response.headers[name] = headers[name];
    });
    if (data || data === false) { // === false allows boolean result
        response.statusCode = statusCode || 200;
        response.body = data;
    } else {
        response.statusCode = statusCode || 204;
    }
}

function responder(response: any): TsoaResponse<HttpStatusCodeLiteral, unknown>  {
    return function(status, data, headers) {
        returnHandler(response, status, data, headers);
    };
};

export function getValidatedArgs(args: any, request: any, response: any): any[] {
    const fieldErrors: FieldErrors  = {};
    const values = Object.keys(args).map((key) => {
        const name = args[key].name;
        switch (args[key].in) {
            case 'request':
                return request;
            case 'query':
                return validationService.ValidateParam(args[key], request.query[name], name, fieldErrors, undefined, {{{json minimalSwaggerConfig}}});
            case 'path':
                return validationService.ValidateParam(args[key], request.params[name], name, fieldErrors, undefined, {{{json minimalSwaggerConfig}}});
            case 'header':
                return validationService.ValidateParam(args[key], request.headers[name], name, fieldErrors, undefined, {{{json minimalSwaggerConfig}}});
            case 'body':
                return validationService.ValidateParam(args[key], request.body.json(), name, fieldErrors, undefined, {{{json minimalSwaggerConfig}}});
            case 'body-prop':
                return validationService.ValidateParam(args[key], request.body.json()[name], name, fieldErrors, 'body.', {{{json minimalSwaggerConfig}}});
            case 'res':
                return responder(response);
        }
    });

    if (Object.keys(fieldErrors).length > 0) {
        throw new ValidateError(fieldErrors, '');
    }
    return values;
}

{{#if useSecurity}}
export function authenticateMiddleware(security: TsoaRoute.Security[], request: any, response: any) {
    let user = undefined
    let success = false
    let error = undefined
    for (const secMethod of security) {
        for (const name in secMethod) {
            try {
                user = authentication(request, name, secMethod[name])
                success = true
                break
            } catch (e) {
                error = e
            }
        }
        if (success) {
            break
        }
    }
    if (success) {
        request['user'] = user
        return true
    } else {
        response.statusCode = 401
        if (error.message) {
            response.body = {
                message: error.message
            }
        }
        return false
    }
}
{{/if}}

// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
// CCF:HELPERS-END

// CCF:METADATA-START
{
    "controllers": [
        {{#each controllers}}
        {
          "path": "{{path}}",
          "js_module": "build/{{name}}Proxy.js",
          "actions": [
              {{#each actions}}
              {
                "full_path": "{{fullPath}}",
                "method": "{{method}}",
                "js_function": "{{name}}"
              }{{#unless @last}},{{/unless}}
              {{/each}}
          ]
        }{{#unless @last}},{{/unless}}
        {{/each}}
    ]
}
// CCF:METADATA-END

{{#each controllers}}

// CCF:CONTROLLER-START={{name}}
/* tslint:disable */
/* eslint-disable */
// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

import { parseQuery, getValidatedArgs, promiseHandler, authenticateMiddleware } from './helpers'
import { errorHandler } from '../src/error_handler'
import { {{name}} } from '{{modulePath}}';

// {{modulePath}} {{name}} {{path}}

{{#each actions}}
// {{method}} {{fullPath}}
export function {{name}}(request) {
    const response = {
        body: undefined,
        statusCode: undefined,
        headers: {}
    }

    {{#if security.length}}
    if (!authenticateMiddleware({{json security}}, request, response)) {
        return response;
    }
    {{/if}}

    const args = {
        {{#each parameters}}
            {{@key}}: {{{json this}}},
        {{/each}}
    };

    const request_ = {
        body: request.body,
        headers: request.headers,
        query: parseQuery(request.query),
        params: request.params,
        user: request.user
    }

    try {
        let validatedArgs = getValidatedArgs(args, request_, response);

        const controller = new {{../name}}();

        const data = controller.{{name}}.apply(controller, validatedArgs as any);
        promiseHandler(controller, data, response);
        return response;
    } catch (err) {
        return errorHandler(err, request);
    }
}
{{/each}}

// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
// CCF:CONTROLLER-END
{{/each}}
